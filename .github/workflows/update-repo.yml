name: Update APT Repository

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-repo:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y reprepro gnupg2 debsigs
        
    - name: Setup GPG
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      run: |
        echo "$GPG_PRIVATE_KEY" | gpg --import --batch
        
        # Configure GPG for automated signing
        cat >> ~/.gnupg/gpg.conf << EOF
        use-agent
        pinentry-mode loopback
        batch
        yes
        EOF
        
        cat >> ~/.gnupg/gpg-agent.conf << EOF
        allow-loopback-pinentry
        max-cache-ttl 7200
        default-cache-ttl 7200
        EOF
        
        # Restart GPG agent
        gpg-connect-agent reloadagent /bye
        
        # Test signing with passphrase
        echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" \
          --pinentry-mode loopback --default-key "$GPG_KEY_ID" \
          --clearsign > /dev/null
        
        # Preset passphrase in GPG agent for reprepro
        echo "$GPG_PASSPHRASE" | /usr/lib/gnupg2/gpg-preset-passphrase \
          --preset $(gpg --with-keygrip --list-secret-keys "$GPG_KEY_ID" | grep Keygrip | head -1 | awk '{print $3}') || true
        
    - name: Verify reprepro configuration
      run: |
        if [ ! -f conf/distributions ]; then
          echo "Error: conf/distributions not found"
          exit 1
        fi
        echo "Using existing conf/distributions:"
        cat conf/distributions
        
    - name: Download packages
      run: |
        mkdir -p incoming
        
        RELEASE_TAG="${{ github.event.release.tag_name || 'latest' }}"
        if [ "$RELEASE_TAG" = "latest" ]; then
          RELEASE_TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r 'select(.tag_name != null) | .tag_name // empty')
        fi
        
        echo "üì¶ Fetching packages from release: $RELEASE_TAG"
        
        if [ -n "$RELEASE_TAG" ]; then
          curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG \
            | jq -r 'select(.assets != null) | .assets[]? | select(.name | endswith(".deb")) | .browser_download_url' \
            | while read -r url; do 
                if [ -n "$url" ]; then
                  echo "Downloading: $url"
                  wget -P incoming/ "$url" || echo "‚ö†Ô∏è Failed to download $url"
                fi
              done
        else
          echo "‚ö†Ô∏è No release tag found"
        fi
        
        DEB_COUNT=$(find incoming -name "*.deb" 2>/dev/null | wc -l)
        echo "‚úÖ Downloaded $DEB_COUNT .deb file(s)"
        ls -lh incoming/ || true
        
    - name: Sign packages (optional)
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # Package signing with debsigs is optional for APT repositories
        # The repository metadata (InRelease) signing is what matters
        echo "‚ÑπÔ∏è Skipping individual package signing (debsigs)"
        echo "   Repository will be signed via InRelease file"
        
    - name: Export public key
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      run: |
        mkdir -p public/dists
        gpg --armor --export "$GPG_KEY_ID" > public/dists/public-key.asc
        
        # Also create KEY.gpg for compatibility
        cp public/dists/public-key.asc public/KEY.gpg
        
        # Verify exported key
        if gpg --dry-run --import public/dists/public-key.asc 2>/dev/null; then
          echo "‚úÖ Public key exported successfully"
          gpg --show-keys public/dists/public-key.asc
        else
          echo "‚ùå Failed to export public key"
          exit 1
        fi
        
    - name: Update repository
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      run: |
        DISTRIBUTION="alpha"
        
        echo "üì¶ Adding packages to repository..."
        for deb in incoming/*.deb; do
          if [ -f "$deb" ]; then
            echo "Adding: $(basename $deb)"
            reprepro -b . -V includedeb $DISTRIBUTION "$deb"
          fi
        done
        
        echo "üîê Exporting and signing repository..."
        reprepro -b . export $DISTRIBUTION
        
        echo "üìã Repository contents:"
        reprepro -b . list $DISTRIBUTION || true
        
        mkdir -p public
        cp -r dists pool public/
        
    - name: Deploy
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "github-actions"
        git add . && git commit -m "Update APT repository" || true
        git push
